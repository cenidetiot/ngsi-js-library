{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to NGSI Library JavaScript.\n\n\nThe NGSI library for JavaScript is a software tool with the aim of transforming JSON entities to NGSI data models, which can be manipulated or operated by the FIWARE Orion Context Broker. This library can be implemented in  applications through RESTFul web services or backend, with the NodeJS execution environment; also this library can be used in the development of mobile applications with frameworks that uses JavaScript as language to develop Android or IOS native applications, such as React Native o Native Script. \n\n\nThe NGSI library is a client of the Orion Context Broker that implement functionalities for the analysis of the JSON objects to determine the match with a data model, and also, functionalities to transform JSON objects to a NGSI v2 entities.\n\n\nThe NGSI Library is composed of two npm modules:\n\n\nNGSI-parser module\n\n\nNGSI-parser module analyzes the syntax of non-structured JSON objects to transform them into FIWARE-NGSIv context entities.\n\n\nngsi-parser\n\n\nOCB-sender module\n\n\nOCB-sender module is an Orion ContextBroker's client. This client manipulates the context information of FIWARE-NGSIv2 context entities, with the aim of send the NGSI context entities updates to the Orion Context Broker and, in this way make operations with them.\n\n\nocb-sender\n\n\nHow it works the NGSI library\n\n\nThe architecture of the NGSI library is composed by two modules npm: ngsi-parser and ocb-sender. These modules can be imported in only one JavaScript project. Figure shows the modules ngsi-parser and ocb-sender of the architecture of the library.\n\n\n\n\nngsi-parser module\n\n\nThe ngsi-parser module has the objective of analyzing and converting the syntax of a non-structured JSON object or attribute to transform it in a NGSI entity context. Additionally, this module provides the functionality to verify if the entity fulfills with the standard specification of a FIWARE data model. The library verifies if the original JSON structure match with the corresponding FIWARE data model. These data model can be located in the repository \u201cdataModels\u201d of the account Github of the SmartSDK proyect.\n\n\nThe ngsi-parser contains three basic elements to perform the analysis of the JSON objects: a) the JSON Parser includes the function needed for the analysis and transformation of a non structured JSON object to one that fulfill with the NGSI standard. b) the Queries Parser is the responsible element to interpret JSON objects to produce context queries to obtain specific data from the Orion Context Broker, and finally, c) the Data JSON Schema Analyzer is  the responsible  to determine if a JSON object  fulfill or not fulfill with a data models and also it generates the list of errors in the match between the JSON schema and the data models.\n\n\nocb-sender module\n\n\nThe module ocb-sender has the main objective of manipulating the context information of NGSI context entities and/or FIWARE data models, in order to send this information to one instance of the Orion Context Broker.\nThe ocb-senser module is composed by four elements: first three elements are used to encapsulate the functionalities of the client of the Orion Context Broker: a) the Entities Functions implements the functions to manipulate the entities of the Orion Context Broker, b) the Queries Functions considers the functions for personalized queries to the Orion Context Broker, b) Subscriptions Functions implement the functions to manipulate the subscriptions of the Orion Context Broker, d) the HTTP-Client is the responsible for the connection of the Orion Context Broker, this component is also used for the ngsi-parser to obtain JSON schemas for a repository.\n\n\nPre-requirements of Installation\n\n\nIn order to use both npm modules of NGSI JS LIbrary its necessary cover the next requirements.\n\n\nNode.js and npm\n\n\nThe installation of Node.js is done through an executable installer or by downloading the source code, this depends directly on the operating system in which it is installed. On the official page of Node.js you can find the download files and the steps to follow for their installation, the official download link is the following:\n\nhttps://nodejs.org/en/download/\n\n\nThe current version of Node.js is 8.10.0, this version includes npm in its version 5.6.0.\n\n\nThe installation of both modules of the NGSI Javascript library requires the previous installation of the following versions.\n\n\n\n\nnode.js >= 8.x.x (in version 8.10.0 or higher)\n\n\nnpm >= 5.x.x (in version 5.0.0 or higher)\n\n\n\n\nTo verify the current version of Node and npm, execute the following commands in console:\n\n\n\n\nnode -v\n\n\nnpm -v",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-ngsi-library-javascript",
            "text": "The NGSI library for JavaScript is a software tool with the aim of transforming JSON entities to NGSI data models, which can be manipulated or operated by the FIWARE Orion Context Broker. This library can be implemented in  applications through RESTFul web services or backend, with the NodeJS execution environment; also this library can be used in the development of mobile applications with frameworks that uses JavaScript as language to develop Android or IOS native applications, such as React Native o Native Script.   The NGSI library is a client of the Orion Context Broker that implement functionalities for the analysis of the JSON objects to determine the match with a data model, and also, functionalities to transform JSON objects to a NGSI v2 entities.  The NGSI Library is composed of two npm modules:  NGSI-parser module  NGSI-parser module analyzes the syntax of non-structured JSON objects to transform them into FIWARE-NGSIv context entities.  ngsi-parser  OCB-sender module  OCB-sender module is an Orion ContextBroker's client. This client manipulates the context information of FIWARE-NGSIv2 context entities, with the aim of send the NGSI context entities updates to the Orion Context Broker and, in this way make operations with them.  ocb-sender",
            "title": "Welcome to NGSI Library JavaScript."
        },
        {
            "location": "/#how-it-works-the-ngsi-library",
            "text": "The architecture of the NGSI library is composed by two modules npm: ngsi-parser and ocb-sender. These modules can be imported in only one JavaScript project. Figure shows the modules ngsi-parser and ocb-sender of the architecture of the library.   ngsi-parser module  The ngsi-parser module has the objective of analyzing and converting the syntax of a non-structured JSON object or attribute to transform it in a NGSI entity context. Additionally, this module provides the functionality to verify if the entity fulfills with the standard specification of a FIWARE data model. The library verifies if the original JSON structure match with the corresponding FIWARE data model. These data model can be located in the repository \u201cdataModels\u201d of the account Github of the SmartSDK proyect.  The ngsi-parser contains three basic elements to perform the analysis of the JSON objects: a) the JSON Parser includes the function needed for the analysis and transformation of a non structured JSON object to one that fulfill with the NGSI standard. b) the Queries Parser is the responsible element to interpret JSON objects to produce context queries to obtain specific data from the Orion Context Broker, and finally, c) the Data JSON Schema Analyzer is  the responsible  to determine if a JSON object  fulfill or not fulfill with a data models and also it generates the list of errors in the match between the JSON schema and the data models.  ocb-sender module  The module ocb-sender has the main objective of manipulating the context information of NGSI context entities and/or FIWARE data models, in order to send this information to one instance of the Orion Context Broker.\nThe ocb-senser module is composed by four elements: first three elements are used to encapsulate the functionalities of the client of the Orion Context Broker: a) the Entities Functions implements the functions to manipulate the entities of the Orion Context Broker, b) the Queries Functions considers the functions for personalized queries to the Orion Context Broker, b) Subscriptions Functions implement the functions to manipulate the subscriptions of the Orion Context Broker, d) the HTTP-Client is the responsible for the connection of the Orion Context Broker, this component is also used for the ngsi-parser to obtain JSON schemas for a repository.",
            "title": "How it works the NGSI library"
        },
        {
            "location": "/#pre-requirements-of-installation",
            "text": "In order to use both npm modules of NGSI JS LIbrary its necessary cover the next requirements.  Node.js and npm  The installation of Node.js is done through an executable installer or by downloading the source code, this depends directly on the operating system in which it is installed. On the official page of Node.js you can find the download files and the steps to follow for their installation, the official download link is the following: https://nodejs.org/en/download/  The current version of Node.js is 8.10.0, this version includes npm in its version 5.6.0.  The installation of both modules of the NGSI Javascript library requires the previous installation of the following versions.   node.js >= 8.x.x (in version 8.10.0 or higher)  npm >= 5.x.x (in version 5.0.0 or higher)   To verify the current version of Node and npm, execute the following commands in console:   node -v  npm -v",
            "title": "Pre-requirements of Installation"
        },
        {
            "location": "/ngsi/",
            "text": "NGSI-parser\n\n\nngsi-parser is a npm module for parsing and converting a simple JSON or value to a NSGI-compliant object\n\n\n\n\nIndex navigation\n\n\n\n\nData type suported\n\n\nHow to Install\n\n\nImport npm module\n\n\nModule Usage\n\n\nEntities Functions\n\n\nContext Queries\n\n\nSchema Analizer\n\n\n\n\n\n\nLicense\n\n\n\n\nData types suported\n\n\nIf value is a \nstring\n, then type \nText\n is used.\nIf value is a \nnumber\n, then type \nNumber\n is used.\nIf value is a \nboolean\n, then type \nBoolean\n is used.\nIf value is \nDate\n, then \nDateTime\n is used.\nIf value is an \nobject\n or \narray\n, then \nStructuredValue\n is used.\nIf value is \nnull\n, then \nNone\n is used.\n\n\nHow to Install\n\n\nnpm install ngsi-parser\n\nor\n\nyarn add ngsi-parser\n\n\n\nImport npm module\n\n\nES5\n\n\n    var ngsi = require('ngsi-parser')\n\n\n\n\nES6\n\n\n    import NGSI as ngsi from 'ngsi-parser'\n\n\n\n\nLicense\n\n\nMIT",
            "title": "Introduction"
        },
        {
            "location": "/ngsi/#ngsi-parser",
            "text": "ngsi-parser is a npm module for parsing and converting a simple JSON or value to a NSGI-compliant object",
            "title": "NGSI-parser"
        },
        {
            "location": "/ngsi/#index-navigation",
            "text": "Data type suported  How to Install  Import npm module  Module Usage  Entities Functions  Context Queries  Schema Analizer    License",
            "title": "Index navigation"
        },
        {
            "location": "/ngsi/#data-types-suported",
            "text": "If value is a  string , then type  Text  is used.\nIf value is a  number , then type  Number  is used.\nIf value is a  boolean , then type  Boolean  is used.\nIf value is  Date , then  DateTime  is used.\nIf value is an  object  or  array , then  StructuredValue  is used.\nIf value is  null , then  None  is used.",
            "title": "Data types suported"
        },
        {
            "location": "/ngsi/#how-to-install",
            "text": "npm install ngsi-parser\n\nor\n\nyarn add ngsi-parser  Import npm module  ES5      var ngsi = require('ngsi-parser')  ES6      import NGSI as ngsi from 'ngsi-parser'  License  MIT",
            "title": "How to Install"
        },
        {
            "location": "/ngsi/docs/EntitiesFunctions/",
            "text": "Entities Functions\n\n\nInd\u00e9x navigation\n\n\n\n\nEntities Functions\n\n\nParse an Entity\n\n\nParse an Attribute \n\n\nParse a value\n\n\n\n\n\n\n\n\nEntities Functions\n\n\nParse an Entity\n\n\n    var entity = ngsi.parseEntity({\n        id :'Room1',\n        type:'Room',\n        temperature : {\n            value : 50 ,\n            metadata : {\n                frecuency: 40,\n                scale: 'Celsious'\n            }\n        },\n        dateStamp : new Date()\n    })\n\n\n\n\nOutput\n\n\n    {\n        \"id\":\"Room1\",\n        \"type\":\"Room\",\n        \"temperature\":{\n            \"value\":50,\n            \"type\":\"Number\",\n            \"metadata\":{\n                \"frecuency\":{\n                    \"value\":40,\n                    \"type\":\"Number\"\n                },\n                \"scale\":{\n                    \"value\":\"Celsious\",\n                    \"type\":\"Text\"\n                }\n            }\n        },\n        \"dateStamp\":{\n            \"value\":\"2017-10-08T04:01:19.560Z\",\n            \"type\":\"DateTime\",\n            \"metadata\":{}\n        }\n    }\n\n\n\n\n\nParse an Attribute\n\n\n    var attribute = ngsi.parseAttrs({\n        temperature : {\n            value : 50,\n            metadata :{\n                frecuency : 50,\n                scale: 'Fahrenheit'\n            }\n        }\n    })\n\n\n\n\nOutput\n\n\n    {\n        \"temperature\":{\n            \"value\":50,\n            \"type\":\"Number\",\n            \"metadata\":{\n                \"frecuency\":{\n                    \"value\":50,\n                    \"type\":\"Number\"\n                },\n                \"scale\":{\n                    \"value\":\"Fahrenheit\",\n                    \"type\":\"Text\"\n                }\n            }\n        }\n    }\n\n\n\n\n\nParse a Value\n\n\n    var value = ngsi.parseValue(50)\n\n\n\n\nOutput\n\n\n    {\n         \"value\": 50,\n         \"type\": \"Number\",\n         \"metadata\": {}\n     }",
            "title": "Entities Functions"
        },
        {
            "location": "/ngsi/docs/EntitiesFunctions/#entities-functions",
            "text": "",
            "title": "Entities Functions"
        },
        {
            "location": "/ngsi/docs/EntitiesFunctions/#index-navigation",
            "text": "Entities Functions  Parse an Entity  Parse an Attribute   Parse a value     Entities Functions  Parse an Entity      var entity = ngsi.parseEntity({\n        id :'Room1',\n        type:'Room',\n        temperature : {\n            value : 50 ,\n            metadata : {\n                frecuency: 40,\n                scale: 'Celsious'\n            }\n        },\n        dateStamp : new Date()\n    })  Output      {\n        \"id\":\"Room1\",\n        \"type\":\"Room\",\n        \"temperature\":{\n            \"value\":50,\n            \"type\":\"Number\",\n            \"metadata\":{\n                \"frecuency\":{\n                    \"value\":40,\n                    \"type\":\"Number\"\n                },\n                \"scale\":{\n                    \"value\":\"Celsious\",\n                    \"type\":\"Text\"\n                }\n            }\n        },\n        \"dateStamp\":{\n            \"value\":\"2017-10-08T04:01:19.560Z\",\n            \"type\":\"DateTime\",\n            \"metadata\":{}\n        }\n    }  Parse an Attribute      var attribute = ngsi.parseAttrs({\n        temperature : {\n            value : 50,\n            metadata :{\n                frecuency : 50,\n                scale: 'Fahrenheit'\n            }\n        }\n    })  Output      {\n        \"temperature\":{\n            \"value\":50,\n            \"type\":\"Number\",\n            \"metadata\":{\n                \"frecuency\":{\n                    \"value\":50,\n                    \"type\":\"Number\"\n                },\n                \"scale\":{\n                    \"value\":\"Fahrenheit\",\n                    \"type\":\"Text\"\n                }\n            }\n        }\n    }  Parse a Value      var value = ngsi.parseValue(50)  Output      {\n         \"value\": 50,\n         \"type\": \"Number\",\n         \"metadata\": {}\n     }",
            "title": "Ind\u00e9x navigation"
        },
        {
            "location": "/ngsi/docs/ContextQueries/",
            "text": "Context Queries\n\n\nInd\u00e9x navigation\n\n\n\n\nContext Queries\n\n\nGenerate Dinamic Query in String Format\n\n\n\n\n\n\n\n\nContext Queries\n\n\nGenerate Dinamic Query in String Format\n\n\n    //Convert a Json to Query\n    let query = ngsi.createQuery({\n    \"id\":\"Device.*\",\n    \"type\":\"Device\",\n    \"options\":\"keyValues\",\n    \"dateObserved\" : \">=2018-02-20T16:54:03.931-06:00\"\n    })\n    console.log(query)\n\n\n\n\nOutput\n\n\n    ?id=Device.*&Device&type=Device&options=keyValues&q=dateObserved>=2018-02-20T16:54:03.931-06:00\n\n\n\n\nUsage with OCB-sender\n\n\n    //Send requests to ContextBroker\n    cb.getWithQuery(query)\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))",
            "title": "Generate Context Queries"
        },
        {
            "location": "/ngsi/docs/ContextQueries/#context-queries",
            "text": "",
            "title": "Context Queries"
        },
        {
            "location": "/ngsi/docs/ContextQueries/#index-navigation",
            "text": "Context Queries  Generate Dinamic Query in String Format",
            "title": "Ind\u00e9x navigation"
        },
        {
            "location": "/ngsi/docs/ContextQueries/#context-queries_1",
            "text": "Generate Dinamic Query in String Format      //Convert a Json to Query\n    let query = ngsi.createQuery({\n    \"id\":\"Device.*\",\n    \"type\":\"Device\",\n    \"options\":\"keyValues\",\n    \"dateObserved\" : \">=2018-02-20T16:54:03.931-06:00\"\n    })\n    console.log(query)  Output      ?id=Device.*&Device&type=Device&options=keyValues&q=dateObserved>=2018-02-20T16:54:03.931-06:00  Usage with OCB-sender      //Send requests to ContextBroker\n    cb.getWithQuery(query)\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))",
            "title": "Context Queries"
        },
        {
            "location": "/ngsi/docs/SchemaAnalizer/",
            "text": "Schema Analizer\n\n\nW\nngsi-parser helps you to manage your Data Models like used in FIWARE, ngsi-parser can analize if the entity complies with the specified model and identify its errors, to do it you need the JSON Schema of this Data Model provided or you can build some.\n\n\nYou can know about JSON Schemas in  \nJSON Schema\n.\n\n\nImporting your JSON Schema\n\n\nYou  can import your JSON schema importing a JSON from a file or from a repository using the help of ocb-sender.\n\n\nImporting From a  JSON File\n\n\n    var ngsi = require('ngsi-parser');\n    var mySchema = require('mySchema.json');\n    ngsi.setModel({\n        mySchema : mySchema\n    });\n\n\n\n\nImporting from a remote repository\n\n\n    var ngsi = require('ngsi-parser');\n    ngsi.setModel({\n        myRemoteSchema : 'https://yourdatamodels.com/myRemote'\n    });\n\n\n\n\nImporting several schemas from different sources\n\n\n    var ngsi = require('ngsi-parser');\n    var mySchema = require('mySchema.json');\n    ngsi.setModel({\n        mySchema : mySchema,\n        myRemoteSchema : 'https://yourdatamodels.com/myRemote',\n        AlertModel : 'https://raw.githubusercontent.com/smartsdk/dataModels/master/Alert/schema.json',\n        anotherModel : require('anotherSchema.json')\n    });\n\n\n\n\nUsing your Data Models Schemas\n\n\nTo use the schemas imported from a JSON file only you need to specify the name with which you entered it to ngsi-parser and it will return you one array with the errors found.\n\n\n    var ngsi = require('ngsi-parser');\n    var mySchema = require('mySchema.json');\n    ngsi.setModel({\n        mySchema : mySchema\n    });\n    var entity = { \n        id :'Room1',\n        type:'Room',\n        temperature : 50, \n        dateStamp :  new  Date()  \n    };\n    let errors  = ngsi.verifyModel('mySchema', entity);\n    if (errors.length === 0 ){\n        console.log(\"The entity it's OK\")\n    }else {\n        errors.map(console.log)\n    }\n\n\n\n\nTo use Schemas from a remote repository is necesary download it, is because you need use ocb-sender, and in this case the method ngsi.verifyModel() becomes to a promise.\n\n\n    var ngsi = require('ngsi-parser');\n    var ocb = require('ocb-sender');\n    ngsi.setModel({\n        myRemoteSchema : 'https://yourdatamodels.com/myRemote',\n    });\n    var entity = { \n        id :'Room1',\n        type:'Room',\n        temperature : 50, \n        dateStamp :  new  Date()  \n    };\n    ngsi.verifyModel('myRemoteSchema', entity, ocb)\n    .then((errors) => { \n        if (errors.length === 0 ){\n            console.log(\"The entity it's OK\")\n        }else {\n            errors.map(console.log)\n        }\n    })\n\n\n\n\nUse without storing the JSON schema\n\n\n    var ngsi = require('ngsi-parser');\n    var ocb = require('ocb-sender');\n    ngsi.verifyModel('https://yourdatamodels.com/myRemote', entity ,cb)\n    .then((errors) => { \n        if (errors.length === 0 ){\n            console.log(\"The entity it's OK\")\n        }else {\n            errors.map(console.log)\n        }\n    })\n\n\n\n\nReal Example Case\n\n\nThe Alert Schema imported from \nFiware Data Models Repository\n  in this \nLink\n.\n\n\n{\n    \"$schema\": \"http://json-schema.org/schema#\",\n    \"id\": \"https://fiware.github.io/dataModels/Alert/schema.json\",\n    \"title\": \"Alert data model JSON Schema\",\n    \"description\": \"An alert generated by a user or device in a givel location\",\n    \"type\": \"object\",\n    \"allOf\": [\n        {\n            \"$ref\": \"https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons\"\n        },\n        {\n\n            \"$ref\": \"https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons\"\n\n        },\n        {\n            \"properties\": {\n                \"description\": {\n                    \"type\": \"string\"\n                },\n                \"dateObserved\": {\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"   \n                },\n                \"validFrom\": {\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"\n                },\n                \"validTo\": {\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"\n                },\n                \"severity\": {\n                    \"type\": \"string\",\n                        \"enum\": [\n                            \"informational\",\n                            \"low\",\n                            \"medium\",\n                            \"high\",\n                            \"critical\"\n                        ]\n                },\n                \"category\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"traffic\",\n                        \"weather\",\n                        \"environment\",\n                        \"health\",\n                        \"security\"\n                    ]\n                },\n                \"subCategory\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"trafficJam\",\n                        \"carAccident\",\n                        \"carWrongDirection\",\n                        \"carStopped\",\n                        \"pothole\",\n                        \"roadClosed\",\n                        \"roadWorks\",\n                        \"hazardOnRoad\",\n                        \"injuredBiker\",\n                        \"rainfall\",\n                        \"highTemperature\",\n                        \"lowTemperature\",\n                        \"heatWave\",\n                        \"ice\",\n                        \"snow\",\n                        \"wind\",\n                        \"fog\",\n                        \"flood\",\n                        \"tsunami\",\n                        \"tornado\",\n                        \"tropicalCyclone\",\n                        \"hurricane\",\n                        \"asthmaAttack\",\n                        \"bumpedPatient\",\n                        \"fallenPatient\",\n                        \"heartAttack\",\n                        \"suspiciousAction\",\n                        \"robbery\",\n                        \"assault\"\n                    ]\n            },\n            \"alertSource\": {\n                \"oneOf\": [\n                    {\n                        \"type\": \"string\",\n                        \"format\": \"uri\"\n                    },\n                    {\n                        \"$ref\": \"https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType\"\n                    }\n                ]\n            },\n            \"data\": {\n                \"type\": \"object\"\n            },\n\n                \"type\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"Alert\"\n                    ],\n                    \"description\": \"NGSI Entity type\"\n                }\n            }\n        }\n    ],\n    \"oneOf\": [\n        {\n            \"required\": [\n                \"id\",\n                \"type\",\n                \"location\",\n                \"alertSource\",\n                \"category\",\n                \"dateObserved\"\n            ]\n        },\n        {\n            \"required\": [\n                \"id\",\n                \"type\",\n                \"address\",\n                \"alertSource\",\n                \"category\",\n                \"dateObserved\"\n            ]\n        }\n    ]\n}\n\n\n\n\nvar ngsi = require('ngsi-parser');\nvar ocb = require('ocb-sender');\n\nngsi.setModel({\n    Alert : 'https://raw.githubusercontent.com/smartsdk/dataModels/master/Alert/schema.json'\n})\n\nvar  alertEntity  = {\n    id: \"Alert:Device_Smartphone_7a85d9df7209b8bc:1519086635021\",\n    type: \"Alert\",\n    alertSource: \"Device_Smartphone_7a85d9df7209b8bc\",\n    category: \"traffic\",\n    dateObserved: new  Date(),\n    description: \"Car Accident on Cenidet\",\n    location: {\n    type : \"geo:point\",\n        value : \"18.81186166666667 ,-98.96342000000001\"\n    },\n    severity: \"medium\",\n    subCategory: \"carAccident\",\n    validFrom: new  Date(),\n    validTo: new  Date(),\n    dateCreated : new  Date()\n}\n\nngsi.verifyModel('Alert', alertEntity, ocb)\n.then((errors) => {\n    if (errors.length === 0 ){\n        console.log(\"The entity it's OK\");\n        var ngsiEntity = ngsi.parseEntity(alertEntity);\n        ocb.createEntity(ngsiEntity)\n        .then((result) => console.log(result))\n        .catch((err) => console.log(err))\n    }else {\n        errors.map(console.log)\n        //another action if it does not comply with the model\n    }\n})",
            "title": "Data Model JSON Schema Analizer"
        },
        {
            "location": "/ngsi/docs/SchemaAnalizer/#schema-analizer",
            "text": "W\nngsi-parser helps you to manage your Data Models like used in FIWARE, ngsi-parser can analize if the entity complies with the specified model and identify its errors, to do it you need the JSON Schema of this Data Model provided or you can build some.  You can know about JSON Schemas in   JSON Schema .  Importing your JSON Schema  You  can import your JSON schema importing a JSON from a file or from a repository using the help of ocb-sender.  Importing From a  JSON File      var ngsi = require('ngsi-parser');\n    var mySchema = require('mySchema.json');\n    ngsi.setModel({\n        mySchema : mySchema\n    });  Importing from a remote repository      var ngsi = require('ngsi-parser');\n    ngsi.setModel({\n        myRemoteSchema : 'https://yourdatamodels.com/myRemote'\n    });  Importing several schemas from different sources      var ngsi = require('ngsi-parser');\n    var mySchema = require('mySchema.json');\n    ngsi.setModel({\n        mySchema : mySchema,\n        myRemoteSchema : 'https://yourdatamodels.com/myRemote',\n        AlertModel : 'https://raw.githubusercontent.com/smartsdk/dataModels/master/Alert/schema.json',\n        anotherModel : require('anotherSchema.json')\n    });  Using your Data Models Schemas  To use the schemas imported from a JSON file only you need to specify the name with which you entered it to ngsi-parser and it will return you one array with the errors found.      var ngsi = require('ngsi-parser');\n    var mySchema = require('mySchema.json');\n    ngsi.setModel({\n        mySchema : mySchema\n    });\n    var entity = { \n        id :'Room1',\n        type:'Room',\n        temperature : 50, \n        dateStamp :  new  Date()  \n    };\n    let errors  = ngsi.verifyModel('mySchema', entity);\n    if (errors.length === 0 ){\n        console.log(\"The entity it's OK\")\n    }else {\n        errors.map(console.log)\n    }  To use Schemas from a remote repository is necesary download it, is because you need use ocb-sender, and in this case the method ngsi.verifyModel() becomes to a promise.      var ngsi = require('ngsi-parser');\n    var ocb = require('ocb-sender');\n    ngsi.setModel({\n        myRemoteSchema : 'https://yourdatamodels.com/myRemote',\n    });\n    var entity = { \n        id :'Room1',\n        type:'Room',\n        temperature : 50, \n        dateStamp :  new  Date()  \n    };\n    ngsi.verifyModel('myRemoteSchema', entity, ocb)\n    .then((errors) => { \n        if (errors.length === 0 ){\n            console.log(\"The entity it's OK\")\n        }else {\n            errors.map(console.log)\n        }\n    })  Use without storing the JSON schema      var ngsi = require('ngsi-parser');\n    var ocb = require('ocb-sender');\n    ngsi.verifyModel('https://yourdatamodels.com/myRemote', entity ,cb)\n    .then((errors) => { \n        if (errors.length === 0 ){\n            console.log(\"The entity it's OK\")\n        }else {\n            errors.map(console.log)\n        }\n    })  Real Example Case  The Alert Schema imported from  Fiware Data Models Repository   in this  Link .  {\n    \"$schema\": \"http://json-schema.org/schema#\",\n    \"id\": \"https://fiware.github.io/dataModels/Alert/schema.json\",\n    \"title\": \"Alert data model JSON Schema\",\n    \"description\": \"An alert generated by a user or device in a givel location\",\n    \"type\": \"object\",\n    \"allOf\": [\n        {\n            \"$ref\": \"https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons\"\n        },\n        {\n\n            \"$ref\": \"https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons\"\n\n        },\n        {\n            \"properties\": {\n                \"description\": {\n                    \"type\": \"string\"\n                },\n                \"dateObserved\": {\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"   \n                },\n                \"validFrom\": {\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"\n                },\n                \"validTo\": {\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"\n                },\n                \"severity\": {\n                    \"type\": \"string\",\n                        \"enum\": [\n                            \"informational\",\n                            \"low\",\n                            \"medium\",\n                            \"high\",\n                            \"critical\"\n                        ]\n                },\n                \"category\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"traffic\",\n                        \"weather\",\n                        \"environment\",\n                        \"health\",\n                        \"security\"\n                    ]\n                },\n                \"subCategory\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"trafficJam\",\n                        \"carAccident\",\n                        \"carWrongDirection\",\n                        \"carStopped\",\n                        \"pothole\",\n                        \"roadClosed\",\n                        \"roadWorks\",\n                        \"hazardOnRoad\",\n                        \"injuredBiker\",\n                        \"rainfall\",\n                        \"highTemperature\",\n                        \"lowTemperature\",\n                        \"heatWave\",\n                        \"ice\",\n                        \"snow\",\n                        \"wind\",\n                        \"fog\",\n                        \"flood\",\n                        \"tsunami\",\n                        \"tornado\",\n                        \"tropicalCyclone\",\n                        \"hurricane\",\n                        \"asthmaAttack\",\n                        \"bumpedPatient\",\n                        \"fallenPatient\",\n                        \"heartAttack\",\n                        \"suspiciousAction\",\n                        \"robbery\",\n                        \"assault\"\n                    ]\n            },\n            \"alertSource\": {\n                \"oneOf\": [\n                    {\n                        \"type\": \"string\",\n                        \"format\": \"uri\"\n                    },\n                    {\n                        \"$ref\": \"https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType\"\n                    }\n                ]\n            },\n            \"data\": {\n                \"type\": \"object\"\n            },\n\n                \"type\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"Alert\"\n                    ],\n                    \"description\": \"NGSI Entity type\"\n                }\n            }\n        }\n    ],\n    \"oneOf\": [\n        {\n            \"required\": [\n                \"id\",\n                \"type\",\n                \"location\",\n                \"alertSource\",\n                \"category\",\n                \"dateObserved\"\n            ]\n        },\n        {\n            \"required\": [\n                \"id\",\n                \"type\",\n                \"address\",\n                \"alertSource\",\n                \"category\",\n                \"dateObserved\"\n            ]\n        }\n    ]\n}  var ngsi = require('ngsi-parser');\nvar ocb = require('ocb-sender');\n\nngsi.setModel({\n    Alert : 'https://raw.githubusercontent.com/smartsdk/dataModels/master/Alert/schema.json'\n})\n\nvar  alertEntity  = {\n    id: \"Alert:Device_Smartphone_7a85d9df7209b8bc:1519086635021\",\n    type: \"Alert\",\n    alertSource: \"Device_Smartphone_7a85d9df7209b8bc\",\n    category: \"traffic\",\n    dateObserved: new  Date(),\n    description: \"Car Accident on Cenidet\",\n    location: {\n    type : \"geo:point\",\n        value : \"18.81186166666667 ,-98.96342000000001\"\n    },\n    severity: \"medium\",\n    subCategory: \"carAccident\",\n    validFrom: new  Date(),\n    validTo: new  Date(),\n    dateCreated : new  Date()\n}\n\nngsi.verifyModel('Alert', alertEntity, ocb)\n.then((errors) => {\n    if (errors.length === 0 ){\n        console.log(\"The entity it's OK\");\n        var ngsiEntity = ngsi.parseEntity(alertEntity);\n        ocb.createEntity(ngsiEntity)\n        .then((result) => console.log(result))\n        .catch((err) => console.log(err))\n    }else {\n        errors.map(console.log)\n        //another action if it does not comply with the model\n    }\n})",
            "title": "Schema Analizer"
        },
        {
            "location": "/ocb/",
            "text": "OCB - sender\n\n\nocb - sender is a npm module that handle a NGSI Object for them transportation to FIWARE Orion Context Broker. It makes possible send context information in easy way to the FIWARE Ecosystem.\n\n\n\n\nIndex navigation\n\n\n\n\nHow to Install\n\n\nImport npm module\n\n\nModule Usage\n\n\nGeneral Functions\n\n\nConnection configuration with Orion ContextBroker\n\n\nRetrieve Orion ContextBroker API Resources\n\n\nGet EntityType of ContextBroker\n\n\nGet EntitytTypes of ContextBroker\n\n\n\n\n\n\nSpecific Functions\n\n\nEntities Functions\n\n\nSubscriptions Functions\n\n\nQuery Functions\n\n\n\n\n\n\nUsage in Development of Mobile Apps\n\n\n\n\n\n\nLicense\n\n\n\n\nHow to install\n\n\nnpm install ocb-sender\n\n\n\n\nor\n\n\nyarn add ocb-sender\n\n\n\n\nImport npm module.\n\n\nES5\n\n\n    var cb = require('ocb-sender');\n\n\n\n\nES6\n\n\n    import OCB as cb from  ocb-sender;\n\n\n\n\nModule Usage\n\n\nConnection configuration with Orion ContextBroker.\n\n\n cb.config(urlContextBroker, port, version)\n .then((result) => console.log(result))\n .catch((err) => console.log(err))\n\n\n\n\n\n\nExample\n\n\n\n\ncb.config('http://207.249.127.149',1026,'v2')\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nRetrieve Orion ContextBroker API Resources.\n\n\n\n\nExample\n\n\n\n\ncb.retrieveAPIResources()\n.then((result) => console.log(result))\n.catch((err) console.log(err))\n\n\n\n\nGet EntityType of ContextBroker.\n\n\n\n\nExample\n\n\n\n\ncb.getEntityType(\"Device\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nGet EntityTypes of ContextBroker.\n\n\n\n\nExample\n\n\n\n\ncb.getEntityTypes()\n.then((result) => console.dir(result))\n.catch((err) => console.log(err))\n\n\n\n\nLicense\n\n\nMIT",
            "title": "Introduction"
        },
        {
            "location": "/ocb/#ocb-sender",
            "text": "ocb - sender is a npm module that handle a NGSI Object for them transportation to FIWARE Orion Context Broker. It makes possible send context information in easy way to the FIWARE Ecosystem.",
            "title": "OCB - sender"
        },
        {
            "location": "/ocb/#index-navigation",
            "text": "How to Install  Import npm module  Module Usage  General Functions  Connection configuration with Orion ContextBroker  Retrieve Orion ContextBroker API Resources  Get EntityType of ContextBroker  Get EntitytTypes of ContextBroker    Specific Functions  Entities Functions  Subscriptions Functions  Query Functions    Usage in Development of Mobile Apps    License",
            "title": "Index navigation"
        },
        {
            "location": "/ocb/#how-to-install",
            "text": "npm install ocb-sender  or  yarn add ocb-sender",
            "title": "How to install"
        },
        {
            "location": "/ocb/#import-npm-module",
            "text": "ES5      var cb = require('ocb-sender');  ES6      import OCB as cb from  ocb-sender;",
            "title": "Import npm module."
        },
        {
            "location": "/ocb/#module-usage",
            "text": "Connection configuration with Orion ContextBroker.   cb.config(urlContextBroker, port, version)\n .then((result) => console.log(result))\n .catch((err) => console.log(err))   Example   cb.config('http://207.249.127.149',1026,'v2')\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Retrieve Orion ContextBroker API Resources.   Example   cb.retrieveAPIResources()\n.then((result) => console.log(result))\n.catch((err) console.log(err))  Get EntityType of ContextBroker.   Example   cb.getEntityType(\"Device\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Get EntityTypes of ContextBroker.   Example   cb.getEntityTypes()\n.then((result) => console.dir(result))\n.catch((err) => console.log(err))",
            "title": "Module Usage"
        },
        {
            "location": "/ocb/#license",
            "text": "MIT",
            "title": "License"
        },
        {
            "location": "/ocb/docs/EntitiesFunctions/",
            "text": "Entities Functions\n\n\n\n\nInd\u00e9x navigation\n\n\n\n\nEntities Functions\n\n\nRead Functions\n\n\nGet Entity Attribute Value\n\n\nGet Entity Attribute\n\n\nGet Entity Attributes\n\n\nGet Entity\n\n\nGet entities list of an entity type\n\n\nGet All Entities\n\n\n\n\n\n\nCreate Functions\n\n\nCreate Entity\n\n\n\n\n\n\nUpdate Functions\n\n\nUpdate Entity Attribute Value\n\n\nUpdate Attribute Data\n\n\nReplace All Entity Attributes\n\n\nUpdate Existing Entity Attributes\n\n\nUpdate Or Append Entity Attributes\n\n\n\n\n\n\nDelete Functions\n\n\nDelete entity\n\n\nDelete entity attribute\n\n\n\n\n\n\n\n\n\n\n\n\nRead Functions.\n\n\nGet Entity Attribute Value.\n\n\n\n\nExample\n\n\n\n\ncb.getEntityAttributeValue(\"Room1\", \"temperature\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nGet Entity Attribute.\n\n\n\n\nExample\n\n\n\n\ncb.getEntityAttribute(\"Room1\", \"temperature\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nGet Entity Attributes.\n\n\n\n\nExample\n\n\n\n\ncb.getEntityAttrs(\"Room1\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nGet Entity.\n\n\n\n\nExample\n\n\n\n\ncb.getEntity('Room1')\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nGet entities list of an entity type.\n\n\n\n\nExample\n\n\n\n\ncb.getEntityListType('Room')\n.then((entities) => {console.log(entities)})\n.catch((err) => console.log(err))\n\n\n\n\nGet All Entities.\n\n\n\n\nExample\n\n\n\n\ncb.listEntities()\n.then((entities) => {console.log(entities)})\n.catch((err) => console.log(err))\n\n\n\n\nCreate Functions.\n\n\nCreate Entity.\n\n\n\n\nExample\n\n\n\n\ncb.createEntity({\n    \"id\": \"Room1\",\n    \"temperature\": {\n        \"metadata\": {\n            \"accuracy\": {\n                \"type\": \"Number\",\n                \"value\": 0.8\n            }\n        },\n        \"type\": \"Number\",\n        \"value\": 26.5\n    },\n    \"type\": \"Room\"\n}).then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nUpdate Functions.\n\n\nUpdate Entity Attribute Value.\n\n\n\n\nExample\n\n\n\n\ncb.updateEntityAttributeValue('Room1', 'temperature', 16)\n.then((result) => {console.log(result)})\n.catch((err) => console.log(err))\n\n\n\n\nUpdate Attribute Data.\n\n\n\n\nExample\n\n\n\n\ncb.updateJSONAttrEntity('Room1', 'temperature', {\n    \"type\": \"Number\",\n    \"value\": 34.982398\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nReplace All Entity Attributes.\n\n\n\n\nExample\n\n\n\n\ncb.replaceAllEntityAttributes(\"RoomTest\", {\n    \"pressure\": {\n        \"value\": 720,\n        \"type\": \"Integer\"\n    }\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nUpdate Existing Entity Attributes.\n\n\n\n\nExample \n\n\n\n\ncb.updateEntityAttrs('Room1', { \n    \"temperature\": {\n        \"value\": 75.9345,\n        \"type\": \"Float\"\n    }\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nUpdate Or Append Entity Attributes.\n\n\n\n\nExample\n\n\n\n\ncb.addJSONAttributeToEntity(\"Room1\",{\n    \"pressure\":{\n              \"value\": 90,\n              \"type\": \"Integer\"\n        }\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nDelete Functions.\n\n\nDelete Entity.\n\n\n\n\nExample \n\n\n\n\ncb.deleteEntity(\"Room1\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nDelete Entity Attribute.\n\n\ncb.deleteEntityAttribute(\"RoomTest\", \"pressure\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))",
            "title": "Entities Functions"
        },
        {
            "location": "/ocb/docs/EntitiesFunctions/#entities-functions",
            "text": "",
            "title": "Entities Functions"
        },
        {
            "location": "/ocb/docs/EntitiesFunctions/#index-navigation",
            "text": "Entities Functions  Read Functions  Get Entity Attribute Value  Get Entity Attribute  Get Entity Attributes  Get Entity  Get entities list of an entity type  Get All Entities    Create Functions  Create Entity    Update Functions  Update Entity Attribute Value  Update Attribute Data  Replace All Entity Attributes  Update Existing Entity Attributes  Update Or Append Entity Attributes    Delete Functions  Delete entity  Delete entity attribute",
            "title": "Ind\u00e9x navigation"
        },
        {
            "location": "/ocb/docs/EntitiesFunctions/#read-functions",
            "text": "Get Entity Attribute Value.   Example   cb.getEntityAttributeValue(\"Room1\", \"temperature\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Get Entity Attribute.   Example   cb.getEntityAttribute(\"Room1\", \"temperature\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Get Entity Attributes.   Example   cb.getEntityAttrs(\"Room1\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Get Entity.   Example   cb.getEntity('Room1')\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Get entities list of an entity type.   Example   cb.getEntityListType('Room')\n.then((entities) => {console.log(entities)})\n.catch((err) => console.log(err))  Get All Entities.   Example   cb.listEntities()\n.then((entities) => {console.log(entities)})\n.catch((err) => console.log(err))",
            "title": "Read Functions."
        },
        {
            "location": "/ocb/docs/EntitiesFunctions/#create-functions",
            "text": "Create Entity.   Example   cb.createEntity({\n    \"id\": \"Room1\",\n    \"temperature\": {\n        \"metadata\": {\n            \"accuracy\": {\n                \"type\": \"Number\",\n                \"value\": 0.8\n            }\n        },\n        \"type\": \"Number\",\n        \"value\": 26.5\n    },\n    \"type\": \"Room\"\n}).then((result) => console.log(result))\n.catch((err) => console.log(err))",
            "title": "Create Functions."
        },
        {
            "location": "/ocb/docs/EntitiesFunctions/#update-functions",
            "text": "Update Entity Attribute Value.   Example   cb.updateEntityAttributeValue('Room1', 'temperature', 16)\n.then((result) => {console.log(result)})\n.catch((err) => console.log(err))  Update Attribute Data.   Example   cb.updateJSONAttrEntity('Room1', 'temperature', {\n    \"type\": \"Number\",\n    \"value\": 34.982398\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Replace All Entity Attributes.   Example   cb.replaceAllEntityAttributes(\"RoomTest\", {\n    \"pressure\": {\n        \"value\": 720,\n        \"type\": \"Integer\"\n    }\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Update Existing Entity Attributes.   Example    cb.updateEntityAttrs('Room1', { \n    \"temperature\": {\n        \"value\": 75.9345,\n        \"type\": \"Float\"\n    }\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Update Or Append Entity Attributes.   Example   cb.addJSONAttributeToEntity(\"Room1\",{\n    \"pressure\":{\n              \"value\": 90,\n              \"type\": \"Integer\"\n        }\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))",
            "title": "Update Functions."
        },
        {
            "location": "/ocb/docs/EntitiesFunctions/#delete-functions",
            "text": "Delete Entity.   Example    cb.deleteEntity(\"Room1\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Delete Entity Attribute.  cb.deleteEntityAttribute(\"RoomTest\", \"pressure\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))",
            "title": "Delete Functions."
        },
        {
            "location": "/ocb/docs/QueryFunctions/",
            "text": "Query Functions\n\n\n\n\nInd\u00e9x navigation\n\n\n\n\nQuery Functions\n\n\nPersonalized Query Context\n\n\nQuery Entities on Area\n\n\n\n\n\n\n\n\nQuery Functions.\n\n\nPersonalized query context.\n\n\n\n\nExample\n\n\n\n\nlet query = \"?id=.*&type=Device&georel=coveredBy&q=owner==Idowner&geometry=polygon&coords=18.879751306118546,-99.22197723761204;18.87991373199594,-99.22199869528413;18.87996449005033,-99.22190750017762;18.879984793267777,-99.2218270339072;18.879939111025056,-99.22174656763676;18.879893428769883,-99.22165537253022;18.87973100287282,-99.22145152464509;18.8795888800837,-99.22130132094026;18.879390923140832,-99.221076015383;18.87928940666914,-99.22097945585847;18.87893917436966,-99.22117793932557;18.87856356210443,-99.22121012583375;18.878675230703656,-99.22134960070255;18.878776747547473,-99.22145152464509;18.87888841600463,-99.22154808416965;18.87903053938793,-99.22144079580903;18.879203117619838,-99.22140860930085;18.87936554402868,-99.22153199091554;18.87948228791276,-99.22165537253022;18.879614259162025,-99.22181630507114;18.879751306118546,-99.22197723761204&options=keyValues\"\n\ncb.getWithQuery(query)\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nQuery Entities on Area.\n\n\n\n\nUsage\n\n\n\n\ncb.queryEntitiesOnArea(coordsPolygon, idEntity, entityType, optionskeyValues)\n.then((result) => console.log(JSON.stringify(result)))\n.catch((err) => console.log(err))\n\n\n\n\n\n\nExample\n\n\n\n\ncb.queryEntitiesOnArea([\n    [18.879751306118546,-99.22197723761204],\n    [18.87991373199594,-99.22199869528413],\n    [18.87996449005033,-99.22190750017762],\n    [18.879984793267777,-99.2218270339072],\n    [18.879939111025056,-99.22174656763676],\n    [18.879893428769883,-99.22165537253022],\n    [18.87973100287282,-99.22145152464509],\n    [18.8795888800837,-99.22130132094026],\n    [18.879390923140832,-99.221076015383],\n    [18.87928940666914,-99.22097945585847],\n    [18.87893917436966,-99.22117793932557],\n    [18.87856356210443,-99.22121012583375],\n    [18.878675230703656,-99.22134960070255],\n    [18.878776747547473,-99.22145152464509],\n    [18.87888841600463,-99.22154808416965],\n    [18.87903053938793,-99.22144079580903],\n    [18.879203117619838,-99.22140860930085],\n    [18.87936554402868,-99.22153199091554],\n    [18.87948228791276,-99.22165537253022],\n    [18.879614259162025,-99.22181630507114],\n    [18.879751306118546,-99.22197723761204]\n],\".*\",\"Device\",true)\n.then((result) => console.log(JSON.stringify(result)))\n.catch((err) => console.log(err))",
            "title": "Query Functions"
        },
        {
            "location": "/ocb/docs/QueryFunctions/#query-functions",
            "text": "",
            "title": "Query Functions"
        },
        {
            "location": "/ocb/docs/QueryFunctions/#index-navigation",
            "text": "Query Functions  Personalized Query Context  Query Entities on Area",
            "title": "Ind\u00e9x navigation"
        },
        {
            "location": "/ocb/docs/QueryFunctions/#query-functions_1",
            "text": "Personalized query context.   Example   let query = \"?id=.*&type=Device&georel=coveredBy&q=owner==Idowner&geometry=polygon&coords=18.879751306118546,-99.22197723761204;18.87991373199594,-99.22199869528413;18.87996449005033,-99.22190750017762;18.879984793267777,-99.2218270339072;18.879939111025056,-99.22174656763676;18.879893428769883,-99.22165537253022;18.87973100287282,-99.22145152464509;18.8795888800837,-99.22130132094026;18.879390923140832,-99.221076015383;18.87928940666914,-99.22097945585847;18.87893917436966,-99.22117793932557;18.87856356210443,-99.22121012583375;18.878675230703656,-99.22134960070255;18.878776747547473,-99.22145152464509;18.87888841600463,-99.22154808416965;18.87903053938793,-99.22144079580903;18.879203117619838,-99.22140860930085;18.87936554402868,-99.22153199091554;18.87948228791276,-99.22165537253022;18.879614259162025,-99.22181630507114;18.879751306118546,-99.22197723761204&options=keyValues\"\n\ncb.getWithQuery(query)\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Query Entities on Area.   Usage   cb.queryEntitiesOnArea(coordsPolygon, idEntity, entityType, optionskeyValues)\n.then((result) => console.log(JSON.stringify(result)))\n.catch((err) => console.log(err))   Example   cb.queryEntitiesOnArea([\n    [18.879751306118546,-99.22197723761204],\n    [18.87991373199594,-99.22199869528413],\n    [18.87996449005033,-99.22190750017762],\n    [18.879984793267777,-99.2218270339072],\n    [18.879939111025056,-99.22174656763676],\n    [18.879893428769883,-99.22165537253022],\n    [18.87973100287282,-99.22145152464509],\n    [18.8795888800837,-99.22130132094026],\n    [18.879390923140832,-99.221076015383],\n    [18.87928940666914,-99.22097945585847],\n    [18.87893917436966,-99.22117793932557],\n    [18.87856356210443,-99.22121012583375],\n    [18.878675230703656,-99.22134960070255],\n    [18.878776747547473,-99.22145152464509],\n    [18.87888841600463,-99.22154808416965],\n    [18.87903053938793,-99.22144079580903],\n    [18.879203117619838,-99.22140860930085],\n    [18.87936554402868,-99.22153199091554],\n    [18.87948228791276,-99.22165537253022],\n    [18.879614259162025,-99.22181630507114],\n    [18.879751306118546,-99.22197723761204]\n],\".*\",\"Device\",true)\n.then((result) => console.log(JSON.stringify(result)))\n.catch((err) => console.log(err))",
            "title": "Query Functions."
        },
        {
            "location": "/ocb/docs/SubscriptionsFunctions/",
            "text": "Subscriptions Functions\n\n\n\n\nInd\u00e9x navigation\n\n\n\n\nSubscriptions Functions\n\n\nRead Functions\n\n\nGet All Subscriptions\n\n\nGet Subscription\n\n\n\n\n\n\nCreate Functions\n\n\nCreate Subscription\n\n\n\n\n\n\nUpdate Functions\n\n\nUpdate Subscription\n\n\nUpdate Subscription Status\n\n\n\n\n\n\nDelete Functions\n\n\nDelete Subscription\n\n\n\n\n\n\n\n\n\n\n\n\nRead Functions.\n\n\nGet Subscriptions.\n\n\n\n\nExample\n\n\n\n\ncb.listSubscriptions()\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nGet Subscription.\n\n\n\n\nExample\n\n\n\n\ncb.getSubscription(\"5a83c5463fc4dec59e4ef8e2\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nCreate Functions.\n\n\nCreate Subscription.\n\n\n\n\nExample\n\n\n\n\ncb.createSubscription({\n    \"description\": \"Alert subscription TEST\",\n    \"subject\": {\n    \"entities\": [\n        {\n            \"idPattern\": \".*\",\n            \"type\": \"Alert\"\n        }\n    ],\n    \"condition\": {\n        \"attrs\": [\n            \"id\",   \n            \"type\",\n            \"category\",\n            \"subCategory\",\n            \"location\",\n            \"address\",\n            \"dateObserved\",\n            \"validFrom\",\n            \"validTo\",\n            \"description\",\n            \"alertSource\",\n            \"data\",\n            \"severity\"\n        ]\n        }\n    },\n    \"notification\": {\n        \"attrs\": [\n            \"id\",  \n            \"type\",\n            \"category\",\n            \"subCategory\",\n            \"location\",\n            \"address\",\n            \"dateObserved\",\n            \"validFrom\",\n            \"validTo\",\n            \"description\",\n            \"alertSource\",\n            \"data\",\n            \"severity\"\n        ],\n        \"attrsFormat\": \"normalized\",\n        \"http\": {\n            \"url\": \"http://service.mx\"\n        }\n    },\n    \"throttling\": 5\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nUpdate Functions.\n\n\nUpdate Subscription\n\n\n\n\nExample\n\n\n\n\ncb.updateSubscription(\"5a93a9063fc4dec59e4ef8eb\", {\n    \"description\": \"Alert subscription TEST\",\n    \"subject\": {\n    \"entities\": [\n        {\n            \"idPattern\": \".*\",\n            \"type\": \"Alert\"\n        }\n    ],\n    \"condition\": {\n        \"attrs\": [\n            \"id\",   \n            \"type\",\n            \"location\",\n            \"address\",\n            \"dateObserved\",\n            \"validFrom\",\n            \"validTo\",\n            \"description\",\n        ]\n        }\n    },\n    \"notification\": {\n        \"attrs\": [\n            \"id\",  \n            \"type\",\n            \"category\",\n            \"subCategory\",\n            \"location\",\n            \"address\",\n            \"dateObserved\",\n            \"validFrom\",\n            \"validTo\",\n            \"description\",\n            \"alertSource\",\n            \"data\",\n            \"severity\"\n        ],\n        \"attrsFormat\": \"normalized\",\n        \"http\": {\n            \"url\": \"http://crateservice.com\"\n        }\n    },\n    \"throttling\": 5\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nUpdate Subscription Status.\n\n\n\n\nExample\n\n\n\n\ncb.updateSubscriptionStatus(\"5a81e50a3fc4dec59e4ef8dc\", \"active\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))\n\n\n\n\nDelete Functions.\n\n\nDelete Subscription.\n\n\n\n\nExample\n\n\n\n\ncb.deleteSubscription(\"5a93a9103fc4dec59e4ef8ec\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))",
            "title": "Suscriptions Functions"
        },
        {
            "location": "/ocb/docs/SubscriptionsFunctions/#subscriptions-functions",
            "text": "",
            "title": "Subscriptions Functions"
        },
        {
            "location": "/ocb/docs/SubscriptionsFunctions/#index-navigation",
            "text": "Subscriptions Functions  Read Functions  Get All Subscriptions  Get Subscription    Create Functions  Create Subscription    Update Functions  Update Subscription  Update Subscription Status    Delete Functions  Delete Subscription",
            "title": "Ind\u00e9x navigation"
        },
        {
            "location": "/ocb/docs/SubscriptionsFunctions/#read-functions",
            "text": "Get Subscriptions.   Example   cb.listSubscriptions()\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Get Subscription.   Example   cb.getSubscription(\"5a83c5463fc4dec59e4ef8e2\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))",
            "title": "Read Functions."
        },
        {
            "location": "/ocb/docs/SubscriptionsFunctions/#create-functions",
            "text": "Create Subscription.   Example   cb.createSubscription({\n    \"description\": \"Alert subscription TEST\",\n    \"subject\": {\n    \"entities\": [\n        {\n            \"idPattern\": \".*\",\n            \"type\": \"Alert\"\n        }\n    ],\n    \"condition\": {\n        \"attrs\": [\n            \"id\",   \n            \"type\",\n            \"category\",\n            \"subCategory\",\n            \"location\",\n            \"address\",\n            \"dateObserved\",\n            \"validFrom\",\n            \"validTo\",\n            \"description\",\n            \"alertSource\",\n            \"data\",\n            \"severity\"\n        ]\n        }\n    },\n    \"notification\": {\n        \"attrs\": [\n            \"id\",  \n            \"type\",\n            \"category\",\n            \"subCategory\",\n            \"location\",\n            \"address\",\n            \"dateObserved\",\n            \"validFrom\",\n            \"validTo\",\n            \"description\",\n            \"alertSource\",\n            \"data\",\n            \"severity\"\n        ],\n        \"attrsFormat\": \"normalized\",\n        \"http\": {\n            \"url\": \"http://service.mx\"\n        }\n    },\n    \"throttling\": 5\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))",
            "title": "Create Functions."
        },
        {
            "location": "/ocb/docs/SubscriptionsFunctions/#update-functions",
            "text": "Update Subscription   Example   cb.updateSubscription(\"5a93a9063fc4dec59e4ef8eb\", {\n    \"description\": \"Alert subscription TEST\",\n    \"subject\": {\n    \"entities\": [\n        {\n            \"idPattern\": \".*\",\n            \"type\": \"Alert\"\n        }\n    ],\n    \"condition\": {\n        \"attrs\": [\n            \"id\",   \n            \"type\",\n            \"location\",\n            \"address\",\n            \"dateObserved\",\n            \"validFrom\",\n            \"validTo\",\n            \"description\",\n        ]\n        }\n    },\n    \"notification\": {\n        \"attrs\": [\n            \"id\",  \n            \"type\",\n            \"category\",\n            \"subCategory\",\n            \"location\",\n            \"address\",\n            \"dateObserved\",\n            \"validFrom\",\n            \"validTo\",\n            \"description\",\n            \"alertSource\",\n            \"data\",\n            \"severity\"\n        ],\n        \"attrsFormat\": \"normalized\",\n        \"http\": {\n            \"url\": \"http://crateservice.com\"\n        }\n    },\n    \"throttling\": 5\n})\n.then((result) => console.log(result))\n.catch((err) => console.log(err))  Update Subscription Status.   Example   cb.updateSubscriptionStatus(\"5a81e50a3fc4dec59e4ef8dc\", \"active\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))",
            "title": "Update Functions."
        },
        {
            "location": "/ocb/docs/SubscriptionsFunctions/#delete-functions",
            "text": "",
            "title": "Delete Functions."
        },
        {
            "location": "/ocb/docs/SubscriptionsFunctions/#delete-subscription",
            "text": "Example   cb.deleteSubscription(\"5a93a9103fc4dec59e4ef8ec\")\n.then((result) => console.log(result))\n.catch((err) => console.log(err))",
            "title": "Delete Subscription."
        },
        {
            "location": "/ocb/docs/UsageInMobileApps/",
            "text": "OCB-sender usage in Development of Mobile Apps\n\n\nThe usage  of ocb-sender npm module in the development of mobile apps involve a little change in the code of the module. Once you have download the ocb-sender npm module inside in your project, you should to redirect to the node_modules folder an then, inside of this folder, search the folder of the ocb-sender package. When you have located this folder, search inside of this one the lib folder. \n\n\nIn the lib folder of ocb-sender package is located the file OCB.js, open the file and comment the following line:\n\n\n    var fetch = require('node-fetch');\n\n\n\n\nExample\n\n\n\n\nIn the Future, this issue in ocb-sender npm package it could be improved, detecting the operative system where was installed this module. And in this way, the user would not have to do these changes in the OCB.js file.",
            "title": "Usage in the Development of Mobile Apps"
        },
        {
            "location": "/ocb/docs/UsageInMobileApps/#ocb-sender-usage-in-development-of-mobile-apps",
            "text": "The usage  of ocb-sender npm module in the development of mobile apps involve a little change in the code of the module. Once you have download the ocb-sender npm module inside in your project, you should to redirect to the node_modules folder an then, inside of this folder, search the folder of the ocb-sender package. When you have located this folder, search inside of this one the lib folder.   In the lib folder of ocb-sender package is located the file OCB.js, open the file and comment the following line:      var fetch = require('node-fetch');",
            "title": "OCB-sender usage in Development of Mobile Apps"
        },
        {
            "location": "/ocb/docs/UsageInMobileApps/#example",
            "text": "In the Future, this issue in ocb-sender npm package it could be improved, detecting the operative system where was installed this module. And in this way, the user would not have to do these changes in the OCB.js file.",
            "title": "Example"
        },
        {
            "location": "/modulesUsage/",
            "text": "Examples of both npm module usage.\n\n\nCreate an Entity in the ContextBroker\n\n\n    //Convert a JSON into NGSI Format\n    var entity = ngsi.parseEntity({\n        id :'Room1',\n        type:'Room',\n        temperature : {\n            value : 50 ,\n            metadata : {\n                frecuency: 40,\n                scale: 'Celsious'\n            }\n        },\n        dateStamp : new Date()\n    })\n    // Send to ContextBroker \n    cb.createEntity(entity)\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))\n\n\n\n\nUpdate all the attributes of an entity\n\n\n    //Convert a JSON Attribute to NGSI Attribute Format\n    var attribute = ngsi.parseAttrs({\n        temperature : {\n            value : 50\n        }\n    })\n    // Send to ContextBroker \n    cb.updateEntityAttrs('Room1', attribute)\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))\n\n\n\n\nAdd a JSON Attribute to a NGSI entity.\n\n\n    //Convert a JSON Attribute to NGSI Attribute Format\n    var attribute = ngsi.parseAttrs({\n        temperature : {\n            value : 50\n        }\n    })\n    // Send to ContextBroker \n    cb.addJSONAttributeToEntity('Room1', attribute)\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))\n\n\n\n\nUpdate the JSON Object of an atttribute of the entity\n\n\n    //Convert a attribute value to NGSI Attribute Value Format\n    var value = ngsi.parseValue(50)\n\n    // Send to ContextBroker \n    cb.updateJSONAttrEntity(\n        'idEntity', 'nameAttribute', value\n    )\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))",
            "title": "Examples of both npm module usage"
        },
        {
            "location": "/modulesUsage/#examples-of-both-npm-module-usage",
            "text": "Create an Entity in the ContextBroker      //Convert a JSON into NGSI Format\n    var entity = ngsi.parseEntity({\n        id :'Room1',\n        type:'Room',\n        temperature : {\n            value : 50 ,\n            metadata : {\n                frecuency: 40,\n                scale: 'Celsious'\n            }\n        },\n        dateStamp : new Date()\n    })\n    // Send to ContextBroker \n    cb.createEntity(entity)\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))  Update all the attributes of an entity      //Convert a JSON Attribute to NGSI Attribute Format\n    var attribute = ngsi.parseAttrs({\n        temperature : {\n            value : 50\n        }\n    })\n    // Send to ContextBroker \n    cb.updateEntityAttrs('Room1', attribute)\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))  Add a JSON Attribute to a NGSI entity.      //Convert a JSON Attribute to NGSI Attribute Format\n    var attribute = ngsi.parseAttrs({\n        temperature : {\n            value : 50\n        }\n    })\n    // Send to ContextBroker \n    cb.addJSONAttributeToEntity('Room1', attribute)\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))  Update the JSON Object of an atttribute of the entity      //Convert a attribute value to NGSI Attribute Value Format\n    var value = ngsi.parseValue(50)\n\n    // Send to ContextBroker \n    cb.updateJSONAttrEntity(\n        'idEntity', 'nameAttribute', value\n    )\n    .then((result) => console.log(result))\n    .catch((err) => console.log(err))",
            "title": "Examples of both npm module usage."
        }
    ]
}